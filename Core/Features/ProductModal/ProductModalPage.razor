@page "/productmodal"

@using Microsoft.EntityFrameworkCore;
@using ProjectDataCtx;

@implements IDisposable
@inject IDbContextFactory<EfDataCtx> DbFactory

@if (ProductModal is null)
{
    <p>ProductModal loading....</p>
}
else
{
    <!-- Gloabl Container -->
    <div class="flex items-center justify-center min-h-screen bg-slate-100">
        <!-- card containier -->
    <div
        class="flex flex-col p-6 m-3 space-y-10 bg-white rounded-2xl shadow-2xl md:flex-row md:space-y-0 md:space-x-10 md:m-0 md:p-16">
            <!-- image div -->
        <div>
                <img src="_content/Core/img/product-modal/images/headphone.png" alt=""
                class="mx-auto duration-200 w-60 hover:scale-105">
            </div>
            <!-- content -->
        <div class="flex flex-col space-y-6">
                <!-- label and desc -->
            <div class="flex flex-col mb-4 space-y-3 text-center md:text-left">
                    <div>
                        <div class="inline-block px-3 py-1 text-sm text-white bg-black rounded-full">
                            Free Shipping
                        </div>
                    </div>
                    <!-- Title -->
                <div class="max-w-sm text-2xl font-medium">
                        @(ProductModal.ProductName) @(ProductModal.ProductDescription)
                    </div>
                    <!-- price container -->
                <div class="flex flex-col mb-4 space-y-3 text-center md:text-left">
                        <p class="line-through">$@ProductModal.ProductPreviousPrice</p>
                        <p class="text-5xl font-bold">$@ProductModal.ProductPrice</p>
                        <p class="text-sm font-light text-gray-400">
                            @ProductModal.ProductDetails
                        </p>
                    </div>
                    <!-- Button group -->
                <div class="group">
                        <button class="w-full transition-all duration-150 bg-blue-700 text-white border-b-8 border-b-blue-700 rounded-lg
                                        group-hover:border-t-8 group-hover:border-b-0 group-hover:bg-blue-700
                                        group-hover:border-t-blue-700 group-hover:shadow-lg">
                            <div class=" px-8 py-4 dur bg-blue-500 rounded-lg 
                                        group-hover:bg-blue-700">
                                Add to Cart
                            </div>
                        </button>
                    </div>
                    <!-- Stock -->
                <div class="flex items-center space-x-3 group">
                        <div class="w-3 h-3 bg-green-400 rounded-full
                            group-hover:animate-ping"></div>
                        <div class="text-sm">50+ pcs. in stock</div>
                    </div>
                    <!-- Bottom buttons container -->
                <div class="flex flex-col space-y-4 md:space-y-0 md:space-x-4 md:flex-row">
                        <button class="flex items-center justify-center py-3 px-5 space-x-3 border-2 border-gray-300 rounded-lg shadow-sm
                                        hover:bg-opacity-30 hover:showdow-lg hover:-translate-y-0.5 translate-all duration-150">
                            <img src="_content/Core/img/product-modal/images/weight.png" alt="" class="w-8" />
                            <span>Add to cart</span>
                        </button>
                        <button class="flex items-center justify-center py-3 px-5 space-x-3 border-2 border-gray-300 rounded-lg shadow-sm
                                        hover:bg-opacity-30 hover:showdow-lg hover:-translate-y-0.5 translate-all duration-150">
                            <img src="_content/Core/img/product-modal/images/heart.png" alt="" class="w-8" />
                            <span>Add to wish list</span>
                        </button>
                    </div>

                </div>
            </div>
        </div>
    </div>
}

@code {
    IList<string>? content;

    public bool Busy = false;
    private EfDataCtx? Context = default;
    private ProductModal ProductModal = default;

    protected override async Task OnInitializedAsync()
    {
        Busy = true;

        try
        {
            Context = DbFactory.CreateDbContext();

            if (Context is not null && Context.ProductModals is not null)
            {
                ProductModal = await Context.ProductModals
                .Where(p => p.ProductModalId == 1)
                .Select(p => p).FirstOrDefaultAsync();
            }
        }
        finally
        {
            Busy = false;
        }

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}